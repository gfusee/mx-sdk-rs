use core::marker::PhantomData;

use crate::{
    api::{
        const_handles, use_raw_handle, ErrorApi, ErrorApiImpl, ManagedBufferApiImpl,
        ManagedTypeApi, StaticVarApiImpl, StorageReadApi, StorageReadApiImpl,
    },
    codec::*,
    err_msg,
    types::{
        BigInt, BigUint, ManagedBuffer, ManagedBufferNestedDecodeInput, ManagedRef, ManagedType,
    },
};
use alloc::boxed::Box;

use super::StorageKey;

struct StorageGetInput<'a, 'k, A>
where
    A: StorageReadApi + ManagedTypeApi<'a> + ErrorApi + 'static,
{
    key: ManagedRef<'k, A, StorageKey<'a, A>>,
}

impl<'a, 'k, A> StorageGetInput<'a, 'k, A>
where
    A: StorageReadApi + ManagedTypeApi<'a> + ErrorApi + 'static,
{
    #[inline]
    fn new(key: ManagedRef<'k, A, StorageKey<'a, A>>) -> Self {
        StorageGetInput { key }
    }

    fn to_managed_buffer(&self) -> ManagedBuffer<'a, A> {
        let mbuf_handle: A::ManagedBufferHandle =
            use_raw_handle(A::static_var_api_impl().next_handle());
        A::storage_read_api_impl()
            .storage_load_managed_buffer_raw(self.key.buffer.get_handle(), mbuf_handle.clone());
        ManagedBuffer::from_handle(mbuf_handle)
    }

    fn to_big_uint(&self) -> BigUint<'a, A> {
        BigUint::from_bytes_be_buffer(&self.to_managed_buffer())
    }

    fn to_big_int(&self) -> BigInt<'a, A> {
        BigInt::from_signed_bytes_be_buffer(&self.to_managed_buffer())
    }

    fn load_len_managed_buffer(&self) -> usize {
        let value_handle: A::ManagedBufferHandle = use_raw_handle(const_handles::MBUF_TEMPORARY_1);
        A::storage_read_api_impl()
            .storage_load_managed_buffer_raw(self.key.buffer.get_handle(), value_handle.clone());
        A::managed_type_impl().mb_len(value_handle)
    }
}

impl<'a, 'k, A> TopDecodeInput for StorageGetInput<'a, 'k, A>
where
    A: StorageReadApi + ManagedTypeApi<'a> + ErrorApi + 'static,
{
    type NestedBuffer = ManagedBufferNestedDecodeInput<'a, A>;

    fn byte_len(&self) -> usize {
        self.load_len_managed_buffer()
    }

    fn into_boxed_slice_u8(self) -> Box<[u8]> {
        self.to_managed_buffer().to_boxed_bytes().into_box()
    }

    #[inline]
    fn into_max_size_buffer<H, const MAX_LEN: usize>(
        self,
        buffer: &mut [u8; MAX_LEN],
        h: H,
    ) -> Result<&[u8], H::HandledErr>
    where
        H: DecodeErrorHandler,
    {
        self.to_managed_buffer().into_max_size_buffer(buffer, h)
    }

    #[inline]
    fn supports_specialized_type<T: TryStaticCast>() -> bool {
        T::type_eq::<ManagedBuffer<'a, A>>() || T::type_eq::<BigUint<'a, A>>() || T::type_eq::<BigInt<'a, A>>()
    }

    #[inline]
    fn into_specialized<T, H>(self, h: H) -> Result<T, H::HandledErr>
    where
        T: TryStaticCast,
        H: DecodeErrorHandler,
    {
        if let Some(result) = try_execute_then_cast(|| self.to_managed_buffer()) {
            Ok(result)
        } else if let Some(result) = try_execute_then_cast(|| self.to_big_uint()) {
            Ok(result)
        } else if let Some(result) = try_execute_then_cast(|| self.to_big_int()) {
            Ok(result)
        } else {
            Err(h.handle_error(DecodeError::UNSUPPORTED_OPERATION))
        }
    }

    fn into_nested_buffer(self) -> Self::NestedBuffer {
        ManagedBufferNestedDecodeInput::new(self.to_managed_buffer())
    }
}

pub fn storage_get<'a, A, T>(key: ManagedRef<'_, A, StorageKey<'a, A>>) -> T
where
    T: TopDecode,
    A: StorageReadApi + ManagedTypeApi<'a> + ErrorApi,
{
    let Ok(value) = T::top_decode_or_handle_err(
        StorageGetInput::new(key),
        StorageGetErrorHandler::<'a, A>::default(),
    );
    value
}

/// Useful for storage mappers.
/// Also calls to it generated by macro.
pub fn storage_get_len<'a, A>(key: ManagedRef<'_, A, StorageKey<'a, A>>) -> usize
where
    A: StorageReadApi + ManagedTypeApi<'a> + ErrorApi,
{
    let input = StorageGetInput::new(key);
    input.load_len_managed_buffer()
}

/// Will immediately end the execution when encountering the first decode error, via `signal_error`.
/// Because its handled error type is the never type, when compiled,
/// the codec will return the value directly, without wrapping it in a Result.
#[derive(Clone)]
pub(crate) struct StorageGetErrorHandler<'a, M>
where
    M: ManagedTypeApi<'a> + ErrorApi,
{
    _phantom: PhantomData<M>,
}

impl<'a, M> Copy for StorageGetErrorHandler<'a, M> where M: ManagedTypeApi<'a> + ErrorApi {}

impl<'a, M> Default for StorageGetErrorHandler<'a, M>
where
    M: ManagedTypeApi<'a> + ErrorApi,
{
    fn default() -> Self {
        Self {
            _phantom: PhantomData,
        }
    }
}

impl<'a, M> DecodeErrorHandler for StorageGetErrorHandler<'a, M>
where
    M: ManagedTypeApi<'a> + ErrorApi,
{
    type HandledErr = !;

    fn handle_error(&self, err: DecodeError) -> Self::HandledErr {
        let mut message_buffer = ManagedBuffer::<'a, M>::new_from_bytes(err_msg::STORAGE_DECODE_ERROR);
        message_buffer.append_bytes(err.message_bytes());
        M::error_api_impl().signal_error_from_buffer(message_buffer.get_handle())
    }
}
